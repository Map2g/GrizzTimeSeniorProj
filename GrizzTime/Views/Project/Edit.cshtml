@model GrizzTime.ViewModels.Project

@*We get the employee list and contract list from here*@
@using GrizzTime.ViewModels


@{
    string ProjectName = Model.ProjName;
    ViewBag.Title = "Edit " + ProjectName;

    //Remove non-pms from list.
    List<Employee> employees = Employee.EmployeeList(ViewBag.UserID);
    employees.RemoveAll(x => x.EmpType != "Project Manager");

    //convert employee list to selectlist
    List<SelectListItem> pmList = employees.ConvertAll(a =>
    {
        return new SelectListItem()
        {
            Text = a.EmpFName + " " + a.EmpLName,
            Value = a.UserID.ToString()
        };
    });

    foreach (SelectListItem item in pmList)
    {
        if (item.Value == Model.ProjManID)
        {
            item.Selected = true;
            break;
        }
    }

}

<!--#region CHECK BOX CSS-->
<style>
/* Hide the browser's default checkbox */
.container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.checkmark {
  position: absolute;
  top: 0;
  left: 0;
  height: 25px;
  width: 25px;
  background-color: #eee;
}

/* On mouse-over, add a grey background color */
.container:hover input ~ .checkmark {
  background-color: #ccc;
}

/* When the checkbox is checked, add a blue background */
.container input:checked ~ .checkmark {
  background-color: #2196F3;
}

/* Create the checkmark/indicator (hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

/* Show the checkmark when checked */
.container input:checked ~ .checkmark:after {
  display: block;
}

/* Style the checkmark/indicator */
.container .checkmark:after {
  left: 9px;
  top: 5px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 3px 3px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}
</style>
<!--#endregion-->

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ProjName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjName, new { htmlAttributes = new { @class = "input-md" } })
                @Html.ValidationMessageFor(model => model.ProjName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjDesc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProjDesc, new { htmlAttributes = new { @class = "input-md" } })
                @Html.ValidationMessageFor(model => model.ProjDesc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjStartDate, new { htmlAttributes = new { @class = "input-md", @type="date" } })
                @Html.ValidationMessageFor(model => model.ProjStartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjEndDate, new { htmlAttributes = new { @class = "input-md", @type="date" } })
                @Html.ValidationMessageFor(model => model.ProjEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContractName, new { htmlAttributes = new { @class = "input-md", @readonly = "readonly", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.ConID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjManID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProjManID, pmList, new { htmlAttributes = new { @class = "select2-dropdown" } })
                @Html.ValidationMessageFor(model => model.ProjManID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsEnded, htmlAttributes: new { @class = "control-label col-md-2" })
            <span class="checkbox-inline">
                @Html.CheckBoxFor(model => model.IsEnded)
            </span>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-4">
            <a class="btn btn-lg btn-default button button4" type="button" href="@Request.UrlReferrer" >
                 Back
            </a>
    </div>
    <div class="col-md-4">
        <a href="@Url.Action( "AddTask", new { id = Model.ProjID })" class="btn btn-lg btn-default button button4" type="button">
            Add Tasks
        </a>
    </div>
    <div class="col-md-4">
        <a href="@Url.Action("AddEmpToProject", new { id = Model.ProjID })" class="btn btn-lg btn-default button button4" type="button">
            Assign Employees
        </a>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "MyProjects", "home")
</div>
