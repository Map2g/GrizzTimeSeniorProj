@model GrizzTime.ViewModels.Project

@*We get the employee list and contract list from here*@
@using GrizzTime.ViewModels


@{
    string ProjectName = Model.ProjName;
    ViewBag.Title = "Edit " + ProjectName;

    //Remove non-pms from list.
    List<Employee> employees = Employee.EmployeeList(ViewBag.UserID);
    employees.RemoveAll(x => x.EmpType != "Project Manager");

    //convert employee list to selectlist
    List<SelectListItem> pmList = employees.ConvertAll(a =>
    {
        return new SelectListItem()
        {
            Text = a.EmpFName + " " + a.EmpLName,
            Value = a.UserID.ToString()
        };
    });

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ProjName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjDesc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProjDesc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjDesc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjStartDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.ProjStartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProjEndDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.ProjEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ConID, Contract.ContractList(ViewBag.UserID) as List<SelectListItem>, "--Select--", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjManID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProjManID, pmList as List<SelectListItem>, "--Select--", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProjManID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsEnded, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.CheckBoxFor(model => model.IsEnded, new { htmlAttributes = new { @class = "form-control" } })
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="db-Row-Button-Box">
    <div class="db-Column-Button-Box">
        <a href="@Request.UrlReferrer">
            <div class="small-button">
                <span>
                    <h2>
                        Back
                    </h2>
                </span>
            </div>
        </a>
    </div>
    <div class="db-Column-Button-Box">
        <a href="@Url.Action( "AddTask", new { id = Model.ProjID })">
            <div class="small-button">
                <span>
                    <h2>
                        Add Tasks
                    </h2>
                </span>
            </div>
        </a>
    </div>
    <div class="db-Column-Button-Box">
        <a href="@Url.Action("AddEmpToProject", new { id = Model.ProjID })">
            <div class="small-button">
                <span>
                    <h2>
                        Assign Employees
                    </h2>
                </span>
            </div>
        </a>
    </div>
</div>

@Html.ActionLink("Assign employees to this project", "AddEmpToProject", new { id = Model.ProjID })
<br />
@Html.ActionLink("Add tasks", "AddTask", new { id = Model.ProjID })

@*Displays alert message telling user how the operation went.*@
@if (ViewBag.Message != null)
{
    <script type="text/javascript">
        window.onload = function () {
            alert("@ViewBag.Message");
        };
    </script>
}


<div>
    @Html.ActionLink("Back to List", "MyProjects", "Business")
</div>
