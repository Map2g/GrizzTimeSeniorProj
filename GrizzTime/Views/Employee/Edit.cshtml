@model GrizzTime.ViewModels.Employee
@using GrizzTime.ViewModels

@{
    ViewBag.Title = "Edit";
    string buscode = Model.BusCode.ToString();

    string Role = Request.Cookies["Role"].Value;

    List<Employee> employees = Employee.EmployeeList(buscode);
    //remove this employee from possible supervisor list.
    //Not sure I want to remove it. Higher levels are their own supervisors
    //employees.RemoveAll(x => x.UserID == Model.UserID); 

    //convert employee list to selectlist
    List<SelectListItem> supervisorList = employees.ConvertAll(a =>
    {
        return new SelectListItem()
        {
            Text = a.EmpFName + " " + a.EmpLName,
            Value = a.UserID.ToString()
        };
    });

    //Mark this user with (Self)
    foreach (SelectListItem item in supervisorList)
    {
        if (item.Value == Model.UserID.ToString())
        {
            item.Text = String.Concat(item.Text, " (Self)");
            break;
        }
    }

    //Get current supervisor as selected
    foreach (SelectListItem item in supervisorList)
    {
        if (item.Value == Model.SupervisorID.ToString())
        {
            item.Selected = true;
            break;
        }
    }

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.EmpFName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmpFName, new { htmlAttributes = new {@class = "input-md" } })
            @Html.ValidationMessageFor(model => model.EmpFName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EmpLName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmpLName, new { htmlAttributes = new { @class = "input-md" } })
            @Html.ValidationMessageFor(model => model.EmpLName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "input-md", @type="text"} })
            @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
        </div>
    </div>

    @*TO DO: Move change password function to its own form*@
    @*<div class="form-group">
        @Html.LabelFor(model => model.UserPW, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserPW, new { htmlAttributes = new { @class = "form-control", @type="password" } })
            @Html.ValidationMessageFor(model => model.UserPW, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.EmpPhone, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmpPhone, new { htmlAttributes = new { @class = "input-md" } })
            @Html.ValidationMessageFor(model => model.EmpPhone, "", new { @class = "text-danger" })
        </div>
    </div>

    <div style="@(Role == "Business"? "display:block" : "display:none")" class="form-group">
        @Html.Label("Job Title:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.EmpType, Employee.JobTypes, "--Select--", new { @class = "select2" })
            @Html.ValidationMessageFor(model => model.EmpType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div style="@(Role == "Business"? "display:block" : "display:none")" class="form-group">
        @Html.Label("Supervisor:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.SupervisorID, supervisorList, "--Select--", new { @class = "select2" })
            @Html.ValidationMessageFor(model => model.SupervisorID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input class="db-Page-Buttons" type="submit" value="Save" />
        </div>
    </div>


    <div class="db-Row-Button-Box">
        <a href="@Request.UrlReferrer">
            <div class="small-button">
                <span>
                    <h2>
                        Back
                    </h2>
                </span>
            </div>
        </a>
    </div>


</div>
 }



